set nobackup
set cursorcolumn
colorscheme new-railscasts
set pyx=3
set laststatus=2

let g:indent_guides_auto_colors = 0
" Set split separator to Unicode box drawing character
set encoding=utf8

let g:fugitive_dynamic_colors = 1

if has('nvim-0.4')
  set pumblend=22
  set winblend=15
  set wildoptions+=pum,tagfile
  :hi PmenuSel blend=5
  set pumheight=15
endif

" Needs to update to defaults for neovim
set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline
set nospell

autocmd BufRead,BufNewFile *.html.erb set filetype=eruby.html
autocmd BufRead,BufNewFile *.html.eex set filetype=eelixir.html
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir.html
au BufRead,BufNewFile mix.lock set filetype=elixir
autocmd BufRead,BufNewFile *.scss set filetype=scss.css

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Little tricks
nnoremap <bs> <c-^>
set undofile


" Fix error for any line plugin
let g:bufferline_echo = 0

" TmuxNavigator
let g:tmux_navigator_save_on_switch = 1
let g:tmux_navigator_disable_when_zoomed = 1

" ALE
let g:ale_use_global_executables = 1
let g:ale_set_highlights = 1
let g:ale_completion_enabled = 0
let g:ale_lint_delay = 300
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 0
let g:ale_sign_error=''
let g:ale_sign_info=''
let g:ale_sign_style_error=''
let g:ale_sign_style_warning=''
let g:ale_sign_warning=''
let g:ale_statusline_format = [' %d', ' %d', ' %d']
let g:ale_virtualtext_cursor = 0

let g:ale_echo_cursor = 0
" let g:ale_virtualtext_cursor = 1
" let g:ale_virtualtext_prefix = '▬▶  '
" let g:ale_set_balloons = 1
" let g:ale_hover = 1
" let g:ale_floating_preview_cursor = 1
" let g:ale_floating_preview = 1
" let g:ale_hover_to_preview = 1
" let g:ale_hover_to_floating_preview = 1
let g:ale_detail_to_floating_preview = 1
let g:ale_use_neovim_diagnostics_api = 1

nmap ]a <Plug>(ale_next_wrap)
nmap [a <Plug>(ale_previous_wrap)
nmap <leader>f <Plug>(ale_fix)
let g:ale_linters = {
  \ 'css': ['stylelint', 'prettier'],
  \ 'elixir': ['credo'],
  \ 'eruby': ['erblint'],
  \ 'haml': ['hamllint'],
  \ 'handlebars': ['ember-template-lint'],
  \ 'html': [],
  \ 'javascript': ['eslint', 'tsserver'],
  \ 'json': ['prettier'],
  \ 'lua': ['luac', 'luacheck'], 
  \ 'ruby': ['standardrb'],
  \ 'scss': ['stylelint', 'prettier'],
  \ 'typescript': ['tslint', 'typecheck', 'tsserver'],
  \ 'vim': ['vint'],
  \ 'vue': ['vls', 'eslint'],
  \}

let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'css': ['stylelint', 'prettier'],
  \ 'elixir': ['mix_format'],
  \ 'javascript': ['prettier', 'eslint'],
  \ 'json': ['prettier'],
  \ 'lua': ['lua-format'],
  \ 'markdown': ['prettier'],
  \ 'ruby': ['prettier', 'standardrb'],
  \ 'scss': ['stylelint'],
  \ 'typescript': ['prettier', 'tslint'],
  \ 'vue': ['prettier'],
  \ 'yaml': ['prettier'],
  \ 'html': ['prettier'],
  \ 'haml': ['prettier'],
  \ 'eruby': ['erblint']
  \}

if filereadable('Gemfile.lock') && !len(matchstr(readfile(expand('Gemfile.lock')), 'standard'))
  let g:ale_fixers['ruby'] = ['prettier', 'rubocop']
  let g:ale_linters['ruby'] = ['rubocop']
endif

"nmap <Leader>d :ALEDetail<CR>
"nmap <Leader>dd :ALEHover<CR>

nmap <silent> <leader>pd <cmd>Gitsigns preview_hunk<CR>
nmap <silent> <leader>pr <cmd>Gitsigns reset_hunk<CR>

" Text Formatting/Layout
set autoindent " auto-indent
set expandtab  " use spaces instead of tabs
set shiftround " always indent/outdent to the nearest tabstop
set smarttab   " use tabs at the start of a line, spaces elsewhere

" elixir config
let g:elixir_use_markdown_for_docs = 1

" Yank history
nmap <space>h :<C-u>CocList -A --normal yank<cr>

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
set splitbelow
set splitright

" Vim-grepper (replaced)
nnoremap <leader>ag  <cmd>lua require('fzf-lua').grep()<CR>

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>
vnoremap <c-s> <Esc>:w<CR>

" vim test plugin
let g:test#strategy = 'tslime'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" let g:test#javascript#mocha#executable = 'NODE_ENV=test mocha'
" let test#ruby#rspec#executable = 'docker-compose exec -e RAILS_ENV=test -e BEAR_LOG_LEVEL=debug app rspec'
" let test#ruby#rspec#executable = 'asdf shell ruby 2.4.1 && bundle exec rspec'
let g:test#elixir#exunit#options = {
  \ 'nearest': '--trace --color',
  \ 'file':    '--trace --color',
  \ 'suite':   '--trace --color',
\}

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Cursor: block in normal/visual, vertical blinking in insert/command, horizontal blinking in replace/operator pending
if has('nvim')
    let &guicursor = 'n-v-c-sm:block-Cursor-blinkon0,'
        \          . 'i-c-ci-ve:ver25-blinkwait1000-blinkon500-blinkoff500,'
        \          . 'r-cr-o:hor20-blinkwait1000-blinkon500-blinkoff500'
endif

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" gutentags
let g:gutentags_generate_on_write = 0 " Disabled on extreme big monolitics

" FZF-lua integration
nnoremap <c-c> <cmd>lua require('fzf-lua').commands()<CR>
nnoremap <c-p> <cmd>lua require('fzf-lua').files()<CR>
nnoremap <c-t> <cmd>lua require('fzf-lua').buffers()<CR>
nnoremap <silent> <leader>ss <cmd>lua require('fzf-lua').live_grep()<cr>
vnoremap <silent> <leader>ss <cmd>lua require('fzf-lua').grep_visual()<cr>
nnoremap <silent> <leader>sh <cmd>lua require('fzf-lua').live_grep({ rg_opts = '-u', prompt = 'Rg -u❯ ' })<cr>
vnoremap <silent> <leader>sh <cmd>lua require('fzf-lua').grep_visual({ rg_opts = 'u', prompt = 'Rg -u❯ ' })<cr>
nnoremap <silent> <leader>sw <cmd>lua require('fzf-lua').grep_cword()<cr>
nnoremap <silent> <leader>sW <cmd>lua require('fzf-lua').grep_cWORD()<cr>
nnoremap <silent> <leader>sl <cmd>lua require('fzf-lua').grep_last()<cr>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>? :History<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>O :BTags<CR>
nnoremap <silent> <leader>ft :Filetypes<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <leader>m <cmd>lua require('fzf-lua').keymaps()<CR>
nnoremap <silent> <leader>o :<C-u>CocCommand fzf-preview.Ctags<CR>
nnoremap <silent> F :<C-u>CocCommand fzf-preview.ProjectGrep  .<CR>
xnoremap <silent> F "sy:FzfPreviewProjectGrep<Space>.<Space>-F<Space>-add-fzf-arg=--query="<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"<CR>
nnoremap <silent> <leader>M :<C-u>FzfPreviewProjectMruFiles<CR>
nnoremap <silent> <leader>b :<C-u>CocCommand fzf-preview.Bookmarks<CR>

" coc node
let g:coc_node_path = '/home/carakan/.asdf/installs/nodejs/16.15.0/bin/node'

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.hbs,*.xml,*.vue'

nnoremap <silent> Q :Bdelete menu<CR>

let g:mustache_abbreviations = 1

" AndrewRadev/ember_tools.vim
let g:ember_tools_highlight_actions = 0

" Configure node, python executable
" let g:node_host_prog = '~/.bun/install/global/neovim/bin/cli.js'
let g:node_host_prog = '~/.asdf/installs/nodejs/16.19.0/lib/node_modules/neovim/bin/cli.js'
let g:bookmark_sign = ''

vmap <leader>y :YankCode<CR>

lua <<EOF
vim.g.colors_name = 'new-railscasts';
require("nvim-surround").setup({});
require("bufferline").setup({
        options = {
          numbers = "none",
          buffer_close_icon = "",
          modified_icon = "",
          close_icon = "",
          left_trunc_marker = "",
          right_trunc_marker = "",
          max_name_length = 25,
          tab_size = 25,
          diagnostics = "nvim_lsp",
          show_tab_indicators = true,
          show_buffer_close_icons = true,
          separator_style = "slant",
          always_show_bufferline = true,
          sort_by = 'relative_directory',
          modified_icon = "",
          hover = {
            enabled = true,
            delay = 200,
            reveal = { 'close' }
          },
          diagnostics_indicator = function(count, level, diagnostics_dict, context)
            local icon = level:match("error") and "" or ""
            return " " .. icon .. count
          end
        },
        highlights = {
          background = {
            fg = "#3e4451",
            bg = "#181621",
          },
          fill = {
            fg = "#c9a35c",
            bg = "#160a00",
          },
          buffer_selected = {
            fg = "#d6d1c7",
            bg = "#282c34",
            bold = true,
          },
          buffer_visible = {
            fg = "#564b3a",
            bg = "#181621",
            italic = true,
            bold = true,
          },
          close_button_visible = {
            fg = "#3e4451",
            bg = "#181621",
          },
          close_button = {
            fg = "#3e4451",
            bg = "#181621",
          },
          close_button_selected = {
            fg = "#a53726",
            bg = "#282c34",
          },
          separator = {
            fg = "#160a00",
            bg = "#181621",
          }, 
          separator_visible = {
            fg = "#160a00",
            bg = "#181621",
          },
          separator_selected = {
            fg = "#160a00",
            bg = "#282c34",
          },
          indicator_selected = {
            fg = "#ccaaff",
            bg = "#282c34",
          },
          modified_selected = {
            fg = "#ffffff",
            bg = "#282c34",
          },
          warning = {
            fb = "#4f4a3c",
            bg = "#181621",
          },
          warning_visible = {
            fb = "#4f4a3c",
            bg = "#181621",
          },
          warning_selected = {
            fg = "#d3c28f",
            bg = "#282c34",
          },
          warning_diagnostic_selected = {
            fg = "#f9b145",
            bg = "#282c34",
            italic = false,
            bold = false,
          },
          error_selected = {
            fg = "#d6b39e",
            bg = "#282c34",
          },
          error_diagnostic_selected = {
            fg = "#F47454",
            bg = "#282c34",
            italic = false,
            bold = false,
          },
        }
})
require('hlslens').setup({
  calm_down = true,
  virt_priority = 2,
  nearest_only = true,
  override_lens = function(render, posList, nearest, idx, relIdx)
    local sfw = vim.v.searchforward == 1
    local indicator, text, chunks
    local absRelIdx = math.abs(relIdx)
    if absRelIdx > 1 then
      indicator = ('%d%s'):format(absRelIdx, sfw ~= (relIdx > 1) and ' ▲' or '▼')
    elseif absRelIdx == 1 then
      indicator = sfw ~= (relIdx == 1) and ' ▲' or '▼'
    else
      indicator = ''
    end
    local lnum, col = unpack(posList[idx])
    if nearest then
      local cnt = #posList
      if indicator ~= '' then
        text = ('[%s %d/%d]'):format(indicator, idx, cnt)
      else
        text = ('[%d/%d]'):format(idx, cnt)
      end
      chunks = {{' ', 'Ignore'}, {text, 'HlSearchLensNear'}}
    else
      text = ('[%s %d]'):format(indicator, idx)
      chunks = {{' ', 'Ignore'}, {text, 'HlSearchLens'}}
    end
    render.setVirt(0, lnum - 1, col - 1, chunks, nearest)
  end
})
vim.cmd [[highlight IndentBlanklineIndent1 guibg=#332717 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent2 guibg=#332b36 gui=nocombine]]
local highlight = {
    "IndentBlanklineIndent1",
    "IndentBlanklineIndent2",
}
require("ibl").setup {
    indent = { highlight = highlight, char = " " },
    --whitespace = {
    --    highlight = highlight,
    --    remove_blankline_trail = false,
    --},
    scope = { enabled = false },
}

require("smartcolumn").setup(
  {
    colorcolumn = { "80", "120", "150" },
    disabled_filetypes = { 
      'help', 'dashboard', 'noice', 'NvimTree', 'fugitive', 'git', 'fzf', 'ccc-ui'
    },
    scope = "window",
  }
)
require('bqf').setup({
    auto_enable = true,
    preview = {
        win_height = 12,
        win_vheight = 12,
        delay_syntax = 80,
        border_chars = {'│', '│', '─', '─', '╭', '╮', '╰', '╯', '█'}
    },
    func_map = {
        vsplit = '',
        ptogglemode = 'z,',
        stoggleup = ''
    },
    filter = {
        fzf = {
            action_for = {['ctrl-s'] = 'split'},
            extra_opts = {'--bind', 'ctrl-o:toggle-all', '--prompt', '> '}
        }
    }
})
require('numb').setup({})
require('gitsigns').setup({
  signs = {
    add          = { text = '▍' },
    change       = { text = '▍' },
    delete       = { text = '▸' },
    topdelete    = { text = '◂' },
    changedelete = { text = '◂' },
    untracked    = { text = '│' },
  },
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  current_line_blame = true,
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol',
    delay = 100,
    ignore_whitespace = false,
  },
  current_line_blame_formatter = ' <author>, <author_time:%Y-%m-%d> - <summary> <abbrev_sha>',
  preview_config = {
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 1,
    col = 1
  },
  _signs_staged_enable = true,
})

local custom_onedark = require'lualine.themes.onedark'
custom_onedark.normal.b.bg = '#444444'
custom_onedark.normal.c.bg = '#444444'
custom_onedark.normal.c.fg = '#bfbbae'
custom_onedark.normal.c.gui = 'bold'
custom_onedark.inactive.b.bg = '#353535'
custom_onedark.inactive.c.bg = '#353535'
custom_onedark.inactive.c.fg = '#a8a494'

require('fzf-lua').setup({
  -- fzf_bin         = 'fzf-tmux',
  nbsp = '\xc2\xa0',
  file_icon_padding = ' ',
  height           = 0.95,            -- window height
  width            = 0.80,
  winopts = {
    height           = 0.95,            -- window height
    width            = 0.85,            -- window width
    row              = 0.25,            -- window row position (0=top, 1=bottom)
    col              = 0.55,            -- window col position (0=left, 1=right)
    hl = {
      border = 'LineNr',
      title = 'Normal', 
    },
  },
  files = {
    -- multiprocess      = false,
    -- debug             = true,
    file_icons        = true,
    color_icons       = false,
  },
  grep = {
    color_icons       = false,
  },
  git = {
    icons = {
      ["M"] = { icon = "★", color = "#C643C6" },
      ["D"] = { icon = "✗", color = "red" },
      ["A"] = { icon = "+", color = "green" },
      ["?"] = { icon = "?", color = "red" },
    },
    stash = {
      preview = "git --no-pager stash show --patch --color {1} | delta --side-by-side --width 200",
    }
  },
  previewers = {
    bat = {
      cmd             = "bat",
      args            = "--style=numbers,changes --color always",
      theme           = 'Coldark-Dark', -- bat preview theme (bat --list-themes)
      config          = nil,            -- nil uses $BAT_CONFIG_PATH
    },
    git_diff = {
      pager        = "delta",
    },
    builtin = {
      treesitter = { enable = false},
      extensions = {
        ["png"] = { "chafa" },
        ["jpg"] = { "chafa" },
        ["gif"] = { "chafa" },
        ["svg"] = { "chafa" },
      },
    },
  },
})

require("gx").setup({
  handlers = {
    plugin = true, -- open plugin links in lua (e.g. packer, lazy, ..)
    github = true, -- open github issues
    brewfile = true, -- open Homebrew formulaes and casks
    package_json = true, -- open dependencies from package.json
    search = true, -- search the web/selection on the web if nothing else is found
  },
  handler_options = {
    search_engine = "google", -- you can select between google, bing, duckduckgo, and ecosia
  },
})

require("diffview").setup({
  enhanced_diff_hl = true,
})
require('lualine').setup({
  options = {
    icons_enabled = true,
    theme = custom_onedark,
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode', 'searchcount'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {{'filename', path = 1, shorting_target = 80}, {'filetype', icon_only = true}},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress', 'tabs'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'diff', {'filename', path = 1, color = { gui = 'italic,bold' }}},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {'fzf', 'fugitive', 'nvim-tree', 'quickfix'},
})
require('nvim-treesitter.configs').setup({
  textobjects = {
    select = {
      enable = true,
    }
  },
  matchup = {
    enable = true,  -- mandatory, false will disable the whole extension
    -- [options]
  },
  ensure_installed = {
    'bash', 'css', 'comment', 'diff', 'dockerfile', 'eex', 'elixir', 'embedded_template', 'erlang', 
    'git_rebase', 'git_config', 'gitattributes', 'gitcommit', 'gitignore', 'glimmer', 'gpg', 'graphql', 'html', 'http',
    'heex', 'javascript', 'json', 'json5', 'jsonc', 'lua', 'markdown', 'markdown_inline', 'pem', 'php',
    'python', 'regex', 'ruby', 'rust', 'scss', 'ssh_config', 'sql', 'toml', 'tsx', 'typescript', 'vim', 'vue', 'xml', 'yaml'
  },
  highlight = {
    enable = false,
  },
  playground = {
    enable = true,
    disable = {},
    updatetime = 25, -- debounced time for highlighting nodes in teh playground from source code
    persist_queries = false, -- Whether the query persists across vim sessions
  },
  autotag = {
      enable = false,
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
  indent = {
    enable = true
  },
  folding = { enable = true }
})
require("nvim-web-devicons").set_icon({
  ["config.ru"] = {
    icon = "",
    color = "#e84e4e",
    name = "ConfigRu"
  };
  erb = {
    icon = "ﴜ",
    color = "#e84e4e",
    name = "Erb",
  };
  ["Gemfile$"] = {
    icon = "",
    color = "#e84e4e",
    name = "Gemfile"
  };
  haml = {
    icon = "",
    color = "#e84e4e",
    name = "Haml",
  };
  md = {
    icon = "",
    color = "#519aba",
    name = "Md",
  };
  rake = {
    icon = "",
    color = "#e84e4e",
    name = "Rake"
  };
  rakefile = {
    icon = "",
    color = "#e84e4e",
    name = "Rakefile"
  };
  rb = {
    icon = "",
    color = "#e84e4e",
    name = "Rb"
  };
})
require('nvim-web-devicons').setup({
  -- globally enable different highlight colors per icon (default to true)
  -- if set to false all icons will have the default icon's color
  color_icons = true;
  -- globally enable default icons (default to false)
  -- will get overriden by `get_icons` option
  default = true;
})
require('nvim-tree').setup({
  view = {
    width = 35,
  },
  update_focused_file = {
    enable = true
  },
  renderer = {
    highlight_opened_files = 'all',
    indent_markers = {
      enable = true,
    },
  },
  filters = {
		custom = { ".bundle",
                 ".elixir_ls",
                 ".git",
                 ".beam",
                 ".swo$",
                 ".swp$",
                 ".vim$",
                 "^ctags$",
                 "^tmp",
                 "_build",
                 "deps",
                 "node_modules",
                 "tags",
               },
	}
})
require('silicon').setup({})
local ccc = require("ccc")
require('ccc').setup({
  inputs = {
    ccc.input.cmyk,
  }
})
-- config = function()
--   vim.o.winwidth = 20
--   vim.o.winminwidth = 20
--   vim.o.equalalways = false
--   require('windows').setup(  { autowidth = {
--       enable = true,
--       winwidth = 5,	
--       filetype = {
--          help = 2,
--       },
--    }})
-- end
require('scrollbar').setup({
  show = true,
  show_in_active_only = false,
  set_highlights = true,
  folds = 1000, -- handle folds, set to number to disable folds if no. of lines in buffer exceeds this
  max_lines = false, -- disables if no. of lines in buffer exceeds this
  handle = {
    text = " ",
    color = '#6f6f6f',
    cterm = nil,
    hide_if_all_visible = true, -- Hides handle if all lines are visible
    blend = 40,
  },
  handlers = {
    diagnostic = true,
    search = true, -- Requires hlslens to be loaded
    gitsigns = true, -- Requires gitsigns.nvim
    ale = false, -- Requires ALE
  },
  marks = {
    Cursor = { color = '#afafaf', text = '◂', priority = 3 },
    Search = { color = '#0095CB', text = { "-", "=" } },
    Error = { color = '#FF5D4F', text = { "-", "=" } },
    Warn = { color = '#FABD2F', text = { "-", "=" } },
    Info = { color = '#458599', text = { "-", "=" } },
    Hint = { color = '#689D6A', text = { "-", "=" } },
    Misc = { color = '#B16286', text = { "-", "=" } },
    GitAdd = { color = '#a4d2a2', text = '┃' },
    GitChange = { color = '#5b1f5b', text = '┃' },
    GitDelete = { color = '#ff8378', text = '┃' },
  },
})
require("gitlinker").setup({});
require("octo").setup({
  picker = 'fzf-lua',
});
-- require("recorder").setup({});
-- require('dressing').setup({})
-- require('nvim-treeclimber').setup()
-- require('colorful-winsep').setup({
--   highlight = {
--     fg = "#686868",
--     bg = "#3e4249",
--   },
-- })
-- require('modicator').setup({});
local builtin = require("statuscol.builtin")
require("statuscol").setup({
  ft_ignore = {
    'help', 'dashboard', 'noice', 'NvimTree', 'fugitive', 'git', 'fzf', 'ccc-ui'
  },
  segments = {
    { text = { builtin.lnumfunc }, click = "v:lua.ScLa", },
    {
      text = { builtin.foldfunc },
      hl = "FoldColumn",
      click = "v:lua.ScFa",
    },
    { text = { ' ', "%s" }, condition = { builtin.not_empty, true }, click = "v:lua.ScSa" },
  }
});
require('reticle').setup({
      on_startup = {
        cursorline = true,
        cursorcolumn = true,
    },
    never = {
        cursorline = { 
          'help', 'dashboard', 'noice', 'git', 'fzf', 'ccc-ui' 
        },
        cursorcolumn = {
          'help', 'dashboard', 'noice', 'NvimTree', 'fugitive', 'git', 'fzf', 'ccc-ui'
        },
    },
})
require("noice").setup({
  lsp = {
    -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      ["cmp.entry.get_documentation"] = true,
    },
  },
  presets = {
    bottom_search = false, -- use a classic bottom cmdline for search
    command_palette = false,
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = false, -- add a border to hover docs and signature help
  },
  views = {
    cmdline_popup = {
      border = {
        style = "none",
        padding = { 2, 3 },
      },
      filter_options = {},
      win_options = {
        winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
      },
    },
  },
  messages = {
    view_search = false, -- view for search count messages. Set to `false` to disable
  },
})

require("advanced_git_search.fzf").setup({
  -- fugitive or diffview
  diff_plugin = "fugitive",
  -- customize git in previewer
  -- e.g. flags such as { "--no-pager" }, or { "-c", "delta.side-by-side=false" }
  git_flags = {},
  -- customize git diff in previewer
  -- e.g. flags such as { "--raw" }
  git_diff_flags = {},
  -- Show builtin git pickers when executing "show_custom_functions" or :AdvancedGitSearch
  show_builtin_git_pickers = false,
})
require('flash').setup({})


local signs = { Error = "", Warn = "", Hint = "", Info = "" }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  local linehl = "DiagnosticUnderline" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = '' })
end

EOF
hi BqfPreviewBorder guifg=#385075
hi link BqfPreviewRange Search





hi ScrollbarGitAdd           guibg=#008700 guifg=#b9eeb8
hi ScrollbarGitAddHandle     guibg=#b9eeb8 guifg=#008700
hi ScrollbarGitChange        guibg=#573054 guifg=#C643C6
hi ScrollbarGitChangeHandle  guibg=#C643C6 guifg=#573054
hi ScrollbarGitDelete        guibg=#FF5D4F guifg=#ff8378
hi ScrollbarGitDeleteHandle  guibg=#ff8378 guifg=#FF5D4F


hi GitSignsAdd guifg=#008700 guibg=#2d2d2d



" Debug highlight
nmap <silent> <leader>is :TSHighlightCapturesUnderCursor<CR>

let g:vimade = {}
let g:vimade.fadelevel = 0.7
let g:vimade.enablesigns = 1
let g:vimade.enablefocusfading = 1

let g:Hexokinase_highlighters = [ 'virtual', 'backgroundfull' ]

let g:Hexokinase_optInPatterns = [
\     'full_hex',
\     'triple_hex',
\     'rgb',
\     'rgba',
\     'hsl',
\     'hsla',
\     'colour_names'
\ ]
let g:Hexokinase_ftOptInPatterns = {
\     'css': 'full_hex,triple_hex,rgb,rgba,hsl,hsla,colour_names',
\     'html': 'full_hex,rgb,rgba,hsl,hsla',
\     'javascript': 'full_hex,rgb,rgba,hsl,hsla'
\ }
let g:Hexokinase_virtualText = '     ██████'

let g:matchup_matchparen_offscreen = {'method': 'popup'}
let g:matchup_matchparen_deferred = 1
let g:matchup_matchparen_hi_surround_always = 1
:hi MatchParen guibg=#422200 gui=bold,italic guifg=NONE blend=25
:hi HighlightedyankRegion guibg=#482d00 blend=45 gui=bold

let g:qs_highlight_on_keys = ['f', 't', 'T']

" Coc Configuration
let g:coc_default_semantic_highlight_groups = 1
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-emoji',
  \ 'coc-elixir',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-lua',
  \ 'coc-html-css-support',
  \ 'coc-markdownlint',
  \ 'coc-sh',
  \ 'coc-snippets',
  \ 'coc-solargraph',
  \ 'coc-sql',
  \ 'coc-styled-components',
  \ 'coc-tag',
  \ '@yaegassy/coc-tailwindcss3',
  \ 'coc-tsserver',
  \ 'coc-grammarly',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-word',
  \ 'coc-yaml',
  \ 'coc-yank'
\ ]
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

vmap <leader>a <Plug>(coc-codeaction)
nmap <leader>a <Plug>(coc-codeaction)

nnoremap <Leader>mf :CocCommand markdownlint.fixAll<CR>

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"
inoremap <silent><expr> <down> coc#pum#visible() ? coc#pum#next(0) : "\<down>"
inoremap <silent><expr> <up> coc#pum#visible() ? coc#pum#prev(0) : "\<up>"

" Map <tab> for trigger completion, completion confirm, snippet expand and jump like VSCode:
  inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#_select_confirm() :
    \ coc#expandableOrJumpable() ?
    \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  let g:coc_snippet_next = '<tab>'

let g:vue_pre_processors = []

" projectionist
if !exists('g:rails_projections')
let g:rails_projections = {
  \  "app/models/*.rb": {
  \     "test": [
  \       "spec/models/{}_spec.rb",
  \       "test/models/{}_test.rb"
  \     ],
  \     "alternate": [
  \       "spec/models/{}_spec.rb",
  \       "test/models/{}_test.rb"
  \     ],
  \   },
  \  "app/controllers/*_controller.rb": {
  \     "test": [
  \       "spec/controllers/{}_controller_spec.rb",
  \       "test/controllers/{}_controller_test.rb",
  \       "spec/requests/{}_spec.rb"
  \     ],
  \     "alternate": [
  \       "spec/controllers/{}_controller_spec.rb",
  \       "test/controllers/{}_controller_test.rb",
  \       "spec/requests/{}_spec.rb"
  \     ],
  \   },
  \   "app/services/*.rb": {
  \     "command": "service",
  \     "test": [
  \       "spec/services/%s_spec.rb",
  \       "test/services/%s_test.rb"
  \     ],
  \     "alternate": [
  \       "spec/services/{}_spec.rb",
  \       "test/services/{}_test.rb"
  \     ],
  \     "template": [
  \       "class {camelcase|capitalize|colons}Service",
  \       "end"
  \     ]
  \   },
  \   "app/queries/*_query.rb": {
  \     "command": "query",
  \     "test": [
  \       "spec/queries/%s_spec.rb",
  \       "test/queries/%s_test.rb"
  \     ],
  \   },
  \   "spec/requests/*_spec.rb": {
  \     "template": [
  \       "require 'rails_helper'",
  \       "",
  \       "RSpec.describe \"{underscore|capitalize|blank}\", type: :request do",
  \       "end"
  \     ],
  \     "type": "integration test"
  \   },
  \  "spec/controllers/*_spec.rb": {
  \    "command": "controller",
  \    "alternate": "app/controllers/{}_controller.rb",
  \    "template": [
  \      "require 'rails_helper'",
  \      "",
  \      "RSpec.describe {camelcase|capitalize|colons}, type: :controller do",
  \      "end"
  \    ]
  \   },
  \  "spec/models/*_spec.rb": {
  \    "command": "model",
  \    "alternate": "app/models/{}.rb",
  \    "template": [
  \      "require 'rails_helper'",
  \      "",
  \      "RSpec.describe {camelcase|capitalize|colons}, type: :model do",
  \      "end"
  \    ]
  \   },
  \  "spec/services/*_spec.rb": {
  \    "command": "services",
  \    "alternate": "app/services/{}.rb",
  \    "template": [
  \      "require 'rails_helper'",
  \      "",
  \      "RSpec.describe {camelcase|capitalize|colons} do",
  \      "end"
  \    ]
  \   },
  \  "spec/lib/*_spec.rb": {
  \    "alternate": "app/lib/{}.rb",
  \    "template": [
  \      "require 'rails_helper'",
  \      "",
  \      "RSpec.describe {camelcase|capitalize|colons} do",
  \      "end"
  \    ]
  \   },
  \   "spec/features/*_spec.rb": { "command": "feature" },
  \ }
endif

let g:projectionist_heuristics = {
  \  "&mix.exs": {
  \    "lib/*.ex": {
  \      "type": "lib",
  \      "alternate": [
  \        "spec/{}_spec.exs",
  \        "test/{}_test.exs",
  \      ],
  \    },
  \    "spec/*_spec.exs": {
  \      "type": "spec",
  \      "alternate": "lib/{}.ex",
  \      "dispatch": "mix espec spec/{}_spec.exs`=v:lnum ? ':'.v:lnum : ''`"
  \    },
  \    "spec/spec_helper.exs": { "type": "spec" },
  \    "test/*_test.exs": {
  \      "type": "test",
  \      "alternate": "lib/{}.ex",
  \      "dispatch": "mix test test/{}_test.exs`=v:lnum ? ':'.v:lnum : ''`"
  \    },
  \    "test/test_helper.exs": { "type": "test" },
  \    "mix.exs": {
  \      "type": "lib",
  \      "alternate": "mix.lock",
  \      "dispatch": "mix deps.get"
  \    },
  \    "mix.lock": { "alternate": "mix.exs" },
  \    "*": {
  \      "make": "mix",
  \      "console": "iex -S mix"
  \    }
  \  },
  \ "ember-cli-build.js": {
  \   "app/routes/*.js": {
  \     "type": "route",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Route.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/{}.hbs"
  \   },
  \   "app/controllers/*.js": {
  \     "type": "controller",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Controller.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/{}.hbs"
  \   },
  \   "app/templates/components/*.hbs": {
  \     "alternate": "tests/integration/components/{}-test.js"
  \   },
  \   "app/components/*.js": {
  \     "type": "component",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Component.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/components/{}.hbs"
  \   },
  \   "app/templates/*.js": {
  \     "type": "template",
  \     "template": [
  \       "{{outlet}}",
  \     ]
  \   },
  \   "app/mixins/*.js": {
  \     "type": "mixin",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Mixin.create({",
  \       "});",
  \     ],
  \   },
  \   "app/models/*.js": {
  \     "type": "model",
  \     "template": [
  \       "import DS from 'ember-data';",
  \       "",
  \       "export default DS.Model.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/adapters/{}.js"
  \   },
  \   "app/adapters/*.js": {
  \     "type": "adapter",
  \     "template": [
  \       "import ApplicationAdapter from './application';",
  \       "",
  \       "export default ApplicationAdapter.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/serializers/{}.js"
  \   },
  \   "app/services/*.js": {
  \     "type": "service",
  \     "template": [
  \       "import Ember from 'Ember';",
  \       "",
  \       "export default Ember.Service.extend({",
  \       "});",
  \     ],
  \   },
  \   "app/serializers/*.js": {
  \     "type": "serializer",
  \     "template": [
  \       "import ApplicationSerializer from './application';",
  \       "",
  \       "export default ApplicationSerializer.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/models/{}.js"
  \   },
  \   "app/mirage/factories/*.js": {
  \     "type": "factory",
  \     "template": [
  \       "import Mirage from 'ember-cli-mirage';",
  \       "",
  \       "export default Mirage.Factory.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/models/{}.js"
  \   },
  \   "tests/unit/models/*-test.js": {
  \     "alternate": "app/models/{}.js"
  \   },
  \   "tests/integration/components/*-test.js": {
  \     "alternate": "app/components/{}.js"
  \   },
  \ },
  \ }

let g:lens#disabled_filetypes = ['NvimTree', 'fzf', 'coc-explorer', 'qf', '', 'DiffviewFileHistory']
let g:lens#animate = 0
let g:lens#height_resize_max = 50
let g:lens#height_resize_min = 15
let g:lens#width_resize_max = 130
let g:lens#width_resize_min = 80

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --follow --hidden --glob "!{.git/*,*.lock}" --color "always" -- ' . shellescape(<q-args>), 1, <bang>0)
let g:db_ui_show_database_icon = 1
let g:db_ui_use_nerd_fonts = 1
let g:db_ui_force_echo_notifications = 1

let g:db_ui_table_helpers = {
\   'postgresql': {
\     'Count': 'SELECT COUNT(*) FROM "{table}"',
\     'Explain': 'EXPLAIN ANALYZE {last_query}'
\   }
\ }

