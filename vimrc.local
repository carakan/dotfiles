" no backups
set nobackup

colorscheme new-railscasts

if has("gui_running")
else
  let g:indent_guides_auto_colors = 0
  " Popup color.
  :hi Pmenu ctermbg=232 ctermfg=253
  :hi PmenuSel ctermbg=239 ctermfg=255
  :hi PmenuSbar ctermbg=255
  " Set split separator to Unicode box drawing character
  set encoding=utf8
  set fillchars=vert:│
end

" No spell in any case
set nospell

" Uses tpope's vim-sensible defaults
set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline

" Enable ruby syntax
let ruby_operators = 1

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Little tricks
nnoremap <bs> <c-^>
set undofile " Only works on neovim

" airline customizations
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline#extensions#tabline#enabled = 1

" ALE
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error=''
let g:ale_sign_warning=''
let g:ale_sign_style_warning=''
let g:ale_sign_info=''
let g:ale_sign_column_always = 0
let g:ale_statusline_format = [' %d', ' %d', '']
let g:airline#extensions#ale#error_symbol   = ' '
let g:airline#extensions#ale#warning_symbol = ' '
:hi ALEErrorSign guibg=#2D2D2D guifg=#D80A0A gui=NONE
:hi ALEWarningSign guibg=#2D2D2D guifg=#FFC66D gui=NONE
nmap ]a <Plug>(ale_next_wrap)
nmap [a <Plug>(ale_previous_wrap)
nmap <leader>f <Plug>(ale_fix)
let g:ale_javascript_prettier_options = '--single-quote --print-width 100 --trailing-comma es5 --arrow-parens always'
let g:ale_typescript_prettier_options = '--single-quote --print-width 100 --trailing-comma es5 --arrow-parens always'
let g:ale_linters = {
 \   'javascript': ['eslint'],
 \   'erb': ['erb', 'erubis'],
 \   'ruby': ['rubocop', 'ruby', 'rails_best_practices', 'reek'],
 \   'typescript': ['tslint', 'typecheck'],
 \   'html': [],
 \   'css': ['stylelint', 'prettier'],
 \   'haml': ['haml-lint'],
 \   'handlebars': ['ember-template-lint'],
 \   'json': ['prettier'],
 \   'scss': ['stylelint', 'prettier'],
 \   'elixir': ['credo', 'mix'],
 \   'vim': ['vint'],
 \}

let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'tslint'],
\   'ruby': ['rubocop', 'trim_whitespace'],
\   'css': ['stylelint', 'prettier'],
\   'scss': ['stylelint'],
\   'html': ['remove_trailing_lines', 'trim_whitespace'],
\   'elixir': ['remove_trailing_lines', 'trim_whitespace', 'mix_format'],
\   'markdown': ['remove_trailing_lines', 'trim_whitespace', 'prettier'],
\   'json': ['prettier']
\}

""""
" Signify

let g:signify_disable_by_default     = 0
let g:signify_cursorhold_insert      = 1
let g:signify_cursorhold_normal      = 1
let g:signify_update_on_bufenter     = 1
let g:signify_update_on_focusgained  = 1
let g:signify_sign_add               = '✚'
let g:signify_sign_delete            = '✖'
let g:signify_sign_delete_first_line = '✭'
let g:signify_sign_change            = '✹'
let g:signify_sign_changedelete      = '➜'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Formatting/Layout                                                 	 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent            " auto-indent
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set smarttab              " use tabs at the start of a line, spaces elsewhere

" elixir config
let g:alchemist#extended_autocomplete = 1

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set tw=120
set textwidth=120
set colorcolumn=+1
:hi ColorColumn guibg=#302424 ctermbg=237
let &colorcolumn="80,".join(range(120,999),",")

" Vim-grepper
nnoremap <leader>ag  :Grepper -tool rg -open -switch<cr>
nnoremap <Leader>* :Grepper -tool rg -cword -noprompt<CR>
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>
vnoremap <c-s> <Esc>:w<CR>

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
let deoplete#tag#cache_limit_size = 5000000

" vim test plugin
let g:test#strategy = 'tslime'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

let test#javascript#mocha#executable = 'NODE_ENV=test mocha'
let test#elixir#exunit#options = {
  \ 'nearest': '--trace',
  \ 'file':    '--trace',
  \ 'suite':   '--stale --trace',
\}

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsEditSplit= "context"

:set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" FZF integration

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

  nnoremap <silent> <C-p> :Files<CR>
  nnoremap <silent> <C-t> :Buffers<CR>
  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>
  nnoremap <silent> <C-c> :Commands<CR>

  nnoremap <silent> F :call SearchWordWithAg()<CR>
  vnoremap <silent> F :call SearchVisualSelectionWithAg()<CR>
  nnoremap <silent> <leader>gl :Commits<CR>
  nnoremap <silent> <leader>ga :BCommits<CR>
  nnoremap <silent> <leader>ft :Filetypes<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Rg' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Rg' selection
  endfunction

  function! SearchWithAgInDirectory(...)
    call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
  endfunction
  command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)

let g:fzf_files_options =
  \ '--preview "(highlight -s candy -O truecolor {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
nnoremap <silent> <leader>s :<C-u>call system('say ' . expand('<cword>'))<CR>

let g:closetag_filenames = "*.html,*.xhtml,*.phtml, *.hbs, *.xml"

nnoremap <silent> Q :CloseBuffers<CR>

let g:LanguageClient_serverCommands = {
    \ 'javascript': ['node', '~/lsp/ember-language-server/lib/start-server.js'],
    \ 'handlebars': ['node', '~/lsp/ember-language-server/lib/start-server.js']
    \ }
let g:mustache_abbreviations = 1
" Automatically start language servers.
let g:LanguageClient_autoStart = 1


" ----------------------------------------------------------------------------
" WebDevIcons
" ----------------------------------------------------------------------------
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_airline_tabline = 1
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ex'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['exs'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jsx'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rabl'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['erb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yaml'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yml'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['svg'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['json'] = ''

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-version'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-gemset'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.rspec'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['Rakefile'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['application.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['environment.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['routes.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['spring.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.keep'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.json'] = ''

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" ----------------------------------------------------------------------------
"  vim-nerdtree-syntax-highlight:
" ----------------------------------------------------------------------------
let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['ex'] = '834F79'
let g:NERDTreeExtensionHighlightColor['exs'] = 'c57bd8'
let g:NERDTreeExtensionHighlightColor['yml'] = 'f4bf70'
let g:NERDTreeExtensionHighlightColor['yaml'] = 'f4bf70'
let g:NERDTreeChDirMode=0

" AndrewRadev/ember_tools.vim
let g:ember_tools_highlight_actions = 0

" Rubygems
nnoremap <leader><leader>g :RubygemsRecentVersion<cr>

let g:airline#extensions#cursormode#enabled = 0

" CoC
let g:node_host_prog = '/Users/carakan/.asdf/installs/nodejs/8.11.1/.npm/lib/node_modules/neovim/bin/cli.js'
let g:LanguageClient_autoStart = 1
let g:LanguageClient_rootMarkers = {
    \ 'elixir': ['mix.exs'],
    \ }
let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'handlebars': ['node', '~/lsp/ember-language-server/lib/start-server.js'],
    \ 'html': ['html-languageserver', '--stdio'],
    \ 'css': ['css-languageserver', '--stdio'],
    \ 'scss': ['css-languageserver', '--stdio'],
    \ 'ruby': ['solargraph', 'stdio']
    \ }
call deoplete#custom#source('LanguageClient', 'min_pattern_length', 2)


  " <leader>ld to go to definition
  autocmd FileType javascript,typescript,json,css,html nnoremap <buffer> <leader>ld :call LanguageClient_textDocument_definition()<cr>
  " <leader>lf to autoformat document
  autocmd FileType javascript,typescript,json,css,html nnoremap <buffer> <leader>lf :call LanguageClient_textDocument_formatting()<cr>
  " <leader>lh for type info under cursor
  autocmd FileType javascript,typescript,json,css,html nnoremap <buffer> <leader>lh :call LanguageClient_textDocument_hover()<cr>
  " <leader>lr to rename variable under cursor
  autocmd FileType javascript,typescript,json,css,html nnoremap <buffer> <leader>lr :call LanguageClient_textDocument_rename()<cr>
  " <leader>lc to switch omnifunc to LanguageClient
  autocmd FileType javascript,typescript,json,css,html,reason nnoremap <buffer> <leader>lc :setlocal omnifunc=LanguageClient#complete<cr>
  " <leader>ls to fuzzy find the symbols in the current document
  autocmd FileType javascript,typescript,json,css,html,reason nnoremap <buffer> <leader>ls :call LanguageClient_textDocument_documentSymbol()<cr>

  " Use as omnifunc by default
  autocmd FileType javascript,python,typescript,json,css,less,html,reason setlocal omnifunc=LanguageClient#complete

 let g:LanguageClient_loggingLevel='DEBUG'
 let g:LanguageClient_loggingFile='~/development/LC.log'

let g:bookmark_sign = ''
highlight BookmarkSign guibg=#2D2D2D guifg=#FFC66D gui=NONE


let g:NERDTreeMapMenu = 'nt'