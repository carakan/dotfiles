let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" no backups
set nobackup
set nowritebackup

" Enable 256 colors
" set t_Co=256
syntax on

" color molokai
" colorscheme onedark
colorscheme railscasts

if has("gui_running")
else
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=239 guibg=#545454
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237 guibg=#3a3a3a

  " Popup color.
  :hi Pmenu ctermbg=232 ctermfg=253
  :hi PmenuSel ctermbg=239 ctermfg=255
  :hi PmenuSbar ctermbg=255
  " Set split separator to Unicode box drawing character
  set encoding=utf8
  set fillchars=vert:│
  :hi VertSplit ctermbg=NONE
  :hi VertSplit ctermfg=239
end

" No spell in any case
set nospell

" Uses tpope's vim-sensible defaults

set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline

" set patched fonts
set guifont=Source\ Code\ Pro\ for\ Powerline:h12

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" airline customizations
" let g:airline_theme='wombat'
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline#extensions#tabline#enabled = 1

" neomake
autocmd! BufWritePost * Neomake
let g:neomake_coffeescript_enabled_makers = ['coffeelint']
let g:neomake_ruby_enabled_makers = ['mri', 'rubocop', 'reek']
let g:neomake_elixir_enabled_makers = ['elixir']
let g:neomake_css_enabled_makers = ['csslint', 'stylelint']
let g:neomake_javascript_enabled_makers = ['jshint', 'jscs', 'eslint']

let g:neomake_warning_sign = {
  \ 'text': '⚠',
  \ 'texthl': 'WarningMsg',
  \ }

let g:neomake_error_sign = {
  \ 'text': '✗',
  \ 'texthl': 'ErrorMsg',
  \ }
  
let g:neomake_airline = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Formatting/Layout                                                 	 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent            " auto-indent
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set smartindent           " automatically insert one extra level of indentation
set smarttab              " use tabs at the start of a line, spaces elsewhere
set nowrap                " don't wrap text

" handle sessions plugin: xolox/vim-session
nnoremap <leader>so :OpenSession
nnoremap <leader>ss :SaveSession
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" search files as full name without any regex
let g:ctrlp_regexp = 1

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1
:hi ColorColumn guibg=#3a2b2b ctermbg=237

" vimux integration
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vi :VimuxInspectRunner<CR>
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vs :VimuxInterruptRunner<CR>

" silver search
command! -nargs=* -complete=file GG Grepper -tool git -query <args>
command! -nargs=* -complete=file Ag Grepper -tool ag -open -switch -query <args>
command! -nargs=* -complete=file Ack Grepper -tool ag -open -switch -query <args>
nnoremap <leader>ag  :Grepper -tool ag -open -switch<cr>

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>l
vnoremap <c-s> <Esc>:w<CR> 

" enable elixir 
let g:vimix_map_keys = 1

" this enable nerdtree when is open vim
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Fix some timeouts
set timeoutlen=1000 ttimeoutlen=0

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#auto_completion_start_length = 2
let b:deoplete_sources = ['buffer', 'neosnippet']
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" vim test plugin
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy = "vimux"

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" neovim
let g:neoterm_position = 'horizontal'
let g:neoterm_automap_keys = ',tt'

nnoremap <silent> <f10> :TREPLSendFile<cr>
nnoremap <silent> <f9> :TREPLSend<cr>
vnoremap <silent> <f9> :TREPLSend<cr>

" run set test lib
nnoremap <silent> ,rt :call neoterm#test#run('all')<cr>
nnoremap <silent> ,rf :call neoterm#test#run('file')<cr>
nnoremap <silent> ,rn :call neoterm#test#run('current')<cr>
nnoremap <silent> ,rr :call neoterm#test#rerun()<cr>

" Useful maps
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>

" Rails commands
command! Troutes :T rake routes
command! -nargs=+ Troute :T rake routes | grep <args>
command! Tmigrate :T rake db:migrate

" Git commands
command! -nargs=+ Tg :T git <args>
