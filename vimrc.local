set nobackup
set cursorcolumn
colorscheme new-railscasts
set pyx=3

let g:indent_guides_auto_colors = 0
" Set split separator to Unicode box drawing character
set encoding=utf8
set fillchars=vert:│

" Uses tpope's vim-sensible defaults
set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline
set nospell

if has('nvim-0.4')
  " Enable menu and window popup transparency (neovim >= 0.4)
  set pumblend=22
  set winblend=15
  set wildoptions+=pum,tagfile
  :hi PmenuSel blend=5
  set pumheight=15
endif

autocmd BufRead,BufNewFile *.html.erb set filetype=eruby.html
autocmd BufRead,BufNewFile *.html.eex set filetype=eelixir.html
autocmd BufRead,BufNewFile *.scss set filetype=scss.css

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Little tricks
nnoremap <bs> <c-^>
set undofile " Only works on neovim

" airline customizations
let g:airline_powerline_fonts = 1
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol   = ' '
let g:airline#extensions#ale#info_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:bufferline_echo = 0

" ALE
let g:ale_use_global_executables = 1
let g:ale_set_highlights = 0
let g:ale_completion_enabled = 1
let g:ale_completion_max_suggestions = 10
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 0
let g:ale_sign_error=''
let g:ale_sign_info=''
let g:ale_sign_style_error=''
let g:ale_sign_style_warning=''
let g:ale_sign_warning=''
let g:ale_statusline_format = [' %d', ' %d', ' %d']
nmap ]a <Plug>(ale_next_wrap)
nmap [a <Plug>(ale_previous_wrap)
nmap <leader>f <Plug>(ale_fix)
let g:ale_linters = {
  \ 'css': ['stylelint', 'prettier'],
  \ 'elixir': ['credo'],
  \ 'erb': ['erb', 'erubis'],
  \ 'haml': ['hamllint'],
  \ 'handlebars': ['ember-template-lint'],
  \ 'html': [],
  \ 'javascript': ['eslint', 'tsserver'],
  \ 'json': ['prettier'],
  \ 'ruby': ['rubocop', 'ruby'],
  \ 'scss': ['stylelint', 'prettier'],
  \ 'typescript': ['tslint', 'typecheck', 'tsserver'],
  \ 'vim': ['vint'],
  \ 'vue': ['vls', 'eslint'],
  \}

let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'css': ['stylelint', 'prettier'],
  \ 'elixir': ['mix_format'],
  \ 'javascript': ['prettier', 'eslint'],
  \ 'json': ['prettier'],
  \ 'markdown': ['prettier'],
  \ 'ruby': ['prettier', 'rubocop'],
  \ 'scss': ['stylelint'],
  \ 'typescript': ['prettier', 'tslint'],
  \ 'vue': ['prettier'],
  \ 'yaml': ['prettier'],
  \ 'html': ['prettier'],
  \ 'haml': ['prettier']
  \}

" Signify
let g:signify_cursorhold_insert = 1
let g:signify_cursorhold_normal = 1
let g:signify_disable_by_default = 0
let g:signify_sign_add = '✚'
let g:signify_sign_change = ''
let g:signify_sign_delete = '✖'
let g:signify_sign_delete_first_line = '﫨'
let g:signify_update_on_bufenter = 1
let g:signify_update_on_focusgained = 1
nmap <silent> <leader>pd :SignifyHunkDiff<CR>
nmap <silent> <leader>pu :SignifyHunkUndo<CR>

" Text Formatting/Layout                                                    "
set autoindent " auto-indent
set expandtab  " use spaces instead of tabs
set shiftround " always indent/outdent to the nearest tabstop
set smarttab   " use tabs at the start of a line, spaces elsewhere

" elixir config
let g:elixir_use_markdown_for_docs = 1

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set textwidth=120
set colorcolumn=+1
let &colorcolumn = '80,' . join(range(120, 999), ',')

" Vim-grepper
nnoremap <leader>ag  :Grepper -tool rg -open -switch<cr>
nnoremap <Leader>* :Grepper -tool rg -cword -noprompt<CR>
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>
vnoremap <c-s> <Esc>:w<CR>

" vim test plugin
let g:test#strategy = 'tslime'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" let g:test#javascript#mocha#executable = 'NODE_ENV=test mocha'
" let test#ruby#rspec#executable = 'docker-compose exec -e RAILS_ENV=test -e BEAR_LOG_LEVEL=debug app rspec'
let g:test#elixir#exunit#options = {
  \ 'nearest': '--trace --color',
  \ 'file':    '--trace --color',
  \ 'suite':   '--trace --color',
\}

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Ultisnips
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<c-z>'
let g:UltiSnipsJumpForwardTrigger = '<c-b>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'snips']

:set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" FZF integration
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \   'bg':      ['bg', 'Normal'],
  \   'hl':      ['fg', 'Comment'],
  \   'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \   'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \   'hl+':     ['fg', 'Statement'],
  \   'info':    ['fg', 'PreProc'],
  \   'border':  ['fg', 'Ignore'],
  \   'prompt':  ['fg', 'Conditional'],
  \   'pointer': ['fg', 'Exception'],
  \   'marker':  ['fg', 'Keyword'],
  \   'spinner': ['fg', 'Label'],
  \   'header':  ['fg', 'Comment'] 
  \ }

let g:fzf_history_dir = '~/.local/share/fzf-history'

function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

nnoremap <silent> <C-c> :Commands<CR>
nnoremap <silent> <C-p> :<C-u>FzfPreviewProjectFiles<CR>
nnoremap <silent> <C-t> :<C-u>FzfPreviewBuffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>? :History<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>O :BTags<CR>
nnoremap <silent> <leader>ft :Filetypes<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>m :Maps<CR>
nnoremap <silent> <leader>o :Tags<CR>
nnoremap <silent> F :<C-u>FzfPreviewProjectGrep .<CR>
xnoremap <silent> F "sy:FzfPreviewProjectGrep<Space>.<Space>-F<Space>-add-fzf-arg=--query="<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"<CR>
nnoremap <silent> <leader>M :<C-u>FzfPreviewProjectMruFiles<CR>
nnoremap <silent> <leader>b :<C-u>FzfPreviewBookmarks<CR>

" fzf_preview
let g:fzf_preview_use_dev_icons = 1
let g:fzf_preview_dev_icons_limit = 1000
let g:fzf_preview_filelist_command = 'rg --files --no-ignore-vcs --smart-case --hidden --follow --no-messages --ignore-file $HOME/.ignore'
let g:fzf_preview_if_binary_command = '[[ "$(file --mime {})" =~ binary ]]'
" let g:fzf_preview_floating_window_winblend = 10
let g:fzf_preview_command = 'bat --color=always --style=full {-1}' 
let g:fzf_preview_floating_window_rate = 0.95

nnoremap <silent> <leader>s :<C-u>call system('say ' . expand('<cword>'))<CR>

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.hbs,*.xml,*.vue'

nnoremap <silent> Q :Bdelete menu<CR>

let g:mustache_abbreviations = 1

" WebDevIcons
let g:DevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['erb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rabl'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['svg'] = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_airline_tabline = 1

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.keep'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.rspec'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-gemset'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-version'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['Rakefile'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['application.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['environment.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.json'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['routes.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['spring.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['node_modules'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['ember-cli'] = ''

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" NERDTree
let g:NERDTreeMapMenu = 'nt'
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTreeShowHidden = 1

" vim-nerdtree-syntax-highlight:
let g:NERDTreeChDirMode=0
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" AndrewRadev/ember_tools.vim
let g:ember_tools_highlight_actions = 0

let g:airline#extensions#cursormode#enabled = 0

" Configure node, python executable
let g:node_host_prog = '/Users/carakan/.asdf/installs/nodejs/12.18.0/.npm/lib/node_modules/neovim/bin/cli.js'
let g:bookmark_sign = ''

vmap <leader>y :YankCode<CR>

function! ExpandLspSnippet()
  call UltiSnips#ExpandSnippetOrJump()
  if !pumvisible() || empty(v:completed_item)
    return ''
  endif
  " only expand Lsp if UltiSnips#ExpandSnippetOrJump not effect.
  let l:value = v:completed_item['word']
  let l:matched = len(l:value)
  if l:matched <= 0
    return ''
  endif
  " remove inserted chars before expand snippet
  if col('.') == col('$')
    let l:matched -= 1
    exec 'normal! ' . l:matched . 'Xx'
  else
    exec 'normal! ' . l:matched . 'X'
  endif
  if col('.') == col('$') - 1
    " move to $ if at the end of line.
    call cursor(line('.'), col('$'))
  endif
  " expand snippet now.
  call UltiSnips#Anon(l:value)
  return ''
endfunction

imap <C-k> <C-R>=ExpandLspSnippet()<CR>

nmap <Leader>is :call <SID>SynStack()<CR>
map <Leader>iS :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
function! <SID>SynStack()
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

let g:vimade = {}
let g:vimade.fadelevel = 0.7
let g:vimade.enablesigns = 1
let g:vimade.enablefocusfading = 1

let g:Hexokinase_optInPatterns = [
\     'full_hex',
\     'triple_hex',
\     'rgb',
\     'rgba',
\     'hsl',
\     'hsla',
\     'colour_names'
\ ]
let g:Hexokinase_ftOptInPatterns = {
\     'css': 'full_hex,triple_hex,rgb,rgba,hsl,hsla,colour_names',
\     'html': 'full_hex,rgb,rgba,hsl,hsla',
\     'javascript': 'full_hex,rgb,rgba,hsl,hsla'
\ }
let g:Hexokinase_virtualText = '     ██████'

let g:matchup_matchparen_offscreen = {'method': 'popup'}
let g:matchup_matchparen_deferred = 1
let g:matchup_matchparen_hi_surround_always = 1
:hi MatchParen guibg=#422200 gui=bold,italic guifg=NONE blend=25
:hi HighlightedyankRegion guibg=#482d00 blend=25

let g:qs_highlight_on_keys = ['f', 't', 'T']

" Coc Configuration
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-ember',
  \ 'coc-emoji',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-sh',
  \ 'coc-tailwindcss',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-snippets',
  \ 'coc-solargraph',
  \ 'coc-tag',
  \ 'coc-tsserver',
  \ 'coc-vetur',
  \ 'coc-markdownlint',
  \ 'coc-vimlsp',
  \ 'coc-yaml',
  \ 'coc-fzf-preview'
\ ]
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

vmap <leader>a <Plug>(coc-codeaction)
nmap <leader>a <Plug>(coc-codeaction)

nnoremap <Leader>mf :CocCommand markdownlint.fixAll<CR>

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

let g:vue_pre_processors = []

" projectionist
let g:rails_projections = {
  \  "app/controllers/*_controller.rb": {
  \     "test": [
  \       "spec/requests/{}_spec.rb",
  \       "spec/controllers/{}_controller_spec.rb",
  \       "test/controllers/{}_controller_test.rb"
  \     ],
  \     "alternate": [
  \       "spec/requests/{}_spec.rb",
  \       "spec/controllers/{}_controller_spec.rb",
  \       "test/controllers/{}_controller_test.rb"
  \     ],
  \   },
  \   "app/services/*.rb": {
  \     "command": "service",
  \     "test": [
  \       "spec/services/%s_spec.rb",
  \       "test/services/%s_test.rb"
  \     ],
  \   },
  \   "app/queries/*_query.rb": {
  \     "command": "query",
  \     "test": [
  \       "spec/queries/%s_spec.rb",
  \       "test/queries/%s_test.rb"
  \     ],
  \   },
  \   "app/graphql/*.rb": {
  \     "command": "graphql",
  \     "test": [
  \       "spec/graphql/{}_spec.rb",
  \       "test/graphql/{}_test.rb"
  \     ],
  \   },
  \   "config/routes.rb": { "command": "routes" },
  \   "spec/*_spec.rb": {
  \     "dispatch": "bin/rspec spec/{}_spec.rb`=v:lnum ? ':'.v:lnum : ''`",
  \   },
  \   "spec/requests/*_spec.rb": {
  \     "command": "request",
  \     "alternate": "app/controllers/{}_controller.rb"
  \   },
  \   "spec/features/*_spec.rb": { "command": "feature" },
  \ }

let g:projectionist_heuristics = {
  \  "&mix.exs": {
  \    "lib/*.ex": {
  \      "type": "lib",
  \      "alternate": [
  \        "spec/{}_spec.exs",
  \        "test/{}_test.exs",
  \      ],
  \    },
  \    "spec/*_spec.exs": {
  \      "type": "spec",
  \      "alternate": "lib/{}.ex",
  \      "dispatch": "mix espec spec/{}_spec.exs`=v:lnum ? ':'.v:lnum : ''`"
  \    },
  \    "spec/spec_helper.exs": { "type": "spec" },
  \    "test/*_test.exs": {
  \      "type": "test",
  \      "alternate": "lib/{}.ex",
  \      "dispatch": "mix test test/{}_test.exs`=v:lnum ? ':'.v:lnum : ''`"
  \    },
  \    "test/test_helper.exs": { "type": "test" },
  \    "mix.exs": {
  \      "type": "lib",
  \      "alternate": "mix.lock",
  \      "dispatch": "mix deps.get"
  \    },
  \    "mix.lock": { "alternate": "mix.exs" },
  \    "*": {
  \      "make": "mix",
  \      "console": "iex -S mix"
  \    }
  \  },
  \ "ember-cli-build.js": {
  \   "app/routes/*.js": {
  \     "type": "route",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Route.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/{}.hbs"
  \   },
  \   "app/controllers/*.js": {
  \     "type": "controller",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Controller.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/{}.hbs"
  \   },
  \   "app/templates/components/*.hbs": {
  \     "alternate": "tests/integration/components/{}-test.js"
  \   },
  \   "app/components/*.js": {
  \     "type": "component",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Component.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/templates/components/{}.hbs"
  \   },
  \   "app/templates/*.js": {
  \     "type": "template",
  \     "template": [
  \       "{{outlet}}",
  \     ]
  \   },
  \   "app/mixins/*.js": {
  \     "type": "mixin",
  \     "template": [
  \       "import Ember from 'ember';",
  \       "",
  \       "export default Ember.Mixin.create({",
  \       "});",
  \     ],
  \   },
  \   "app/models/*.js": {
  \     "type": "model",
  \     "template": [
  \       "import DS from 'ember-data';",
  \       "",
  \       "export default DS.Model.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/adapters/{}.js"
  \   },
  \   "app/adapters/*.js": {
  \     "type": "adapter",
  \     "template": [
  \       "import ApplicationAdapter from './application';",
  \       "",
  \       "export default ApplicationAdapter.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/serializers/{}.js"
  \   },
  \   "app/services/*.js": {
  \     "type": "service",
  \     "template": [
  \       "import Ember from 'Ember';",
  \       "",
  \       "export default Ember.Service.extend({",
  \       "});",
  \     ],
  \   },
  \   "app/serializers/*.js": {
  \     "type": "serializer",
  \     "template": [
  \       "import ApplicationSerializer from './application';",
  \       "",
  \       "export default ApplicationSerializer.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/models/{}.js"
  \   },
  \   "app/mirage/factories/*.js": {
  \     "type": "factory",
  \     "template": [
  \       "import Mirage from 'ember-cli-mirage';",
  \       "",
  \       "export default Mirage.Factory.extend({",
  \       "});",
  \     ],
  \     "alternate": "app/models/{}.js"
  \   },
  \   "tests/unit/models/*-test.js": {
  \     "alternate": "app/models/{}.js"
  \   },
  \   "tests/integration/components/*-test.js": {
  \     "alternate": "app/components/{}.js"
  \   },
  \ },
  \ }
