" no backups
set nobackup
set nowritebackup

colorscheme new-railscasts

if has("gui_running")
else
  let g:indent_guides_auto_colors = 0
  " Popup color.
  :hi Pmenu ctermbg=232 ctermfg=253
  :hi PmenuSel ctermbg=239 ctermfg=255
  :hi PmenuSbar ctermbg=255
  " Set split separator to Unicode box drawing character
  set encoding=utf8
  set fillchars=vert:│
end

" No spell in any case
set nospell

" Uses tpope's vim-sensible defaults

set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline

" Enable ruby syntax
let ruby_operators = 1

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" airline customizations
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline#extensions#tabline#enabled = 1

" neomake
autocmd! BufWritePost * Neomake
let g:neomake_ruby_enabled_makers = ['mri', 'rubocop', 'reek']
let g:neomake_elixir_enabled_makers = ['credo', 'mix']
let g:neomake_css_enabled_makers = ['csslint', 'stylelint']
let g:neomake_scss_enabled_makers = ['scsslint']
let g:neomake_javascript_enabled_makers = ['jshint', 'jscs', 'eslint']
let g:neomake_typescript_enabled_makers = ['tslint', 'tsc']

let g:neomake_error_sign = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {'text': '⚠', 'texthl': 'WarningMsgNeo'}
let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

let g:neomake_airline = 1
:hi WarningMsgNeo guibg=#353535 guifg=#ffd400 ctermbg=237

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Formatting/Layout                                                 	 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent            " auto-indent
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set smartindent           " automatically insert one extra level of indentation
set smarttab              " use tabs at the start of a line, spaces elsewhere
set nowrap                " don't wrap text

" search files as full name without any regex
" let g:ctrlp_regexp = 1
let g:ctrlp_extensions = ['dir', 'mixed', 'funky']

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set tw=120
set textwidth=120
set colorcolumn=+1
:hi ColorColumn guibg=#302424 ctermbg=237
let &colorcolumn="80,".join(range(120,999),",")

" run nearest window
let g:VimuxUseNearestPane = 1

" map <silent><Leader>tt :w<CR> :call VimuxRunCommand("ruby ".  @% . ' -l ' . line('.'))<CR>
" map <silent><Leader>TT :w<CR> :call VimuxRunCommand("ruby ".  @%)<CR>

" silver search
"command! -nargs=* -complete=file GG Grepper -tool git -query <args>
command! -nargs=* -complete=file Agf Grepper -tool rg -open -switch -query <args>
"command! -nargs=* -complete=file Ack Grepper -tool ag -open -switch -query <args>
nnoremap <leader>ag  :Grepper -tool rg -open -switch<cr>

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>l
vnoremap <c-s> <Esc>:w<CR>

" this enable nerdtree when is open vim
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
" let b:deoplete_sources = ['buffer', 'neosnippet']

" vim test plugin
let g:test#strategy = 'tslime'
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tt :TestNearest<CR>
nnoremap <leader>tl :TestLast<CR>
nnoremap <leader>tv :TestVisit<CR>
nnoremap <leader>ta :TestSuite<CR>
let test#javascript#mocha#executable = 'NODE_ENV=test mocha'
let test#elixir#exunit#options = '--trace'

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=2

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" NEW fzf integration
let g:fzf_layout = { 'down': '~30%' }
  nnoremap <silent> <C-t> :Files<CR>
  nnoremap <silent> <C-p> :Files<CR>
  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>
  nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
  nnoremap <silent> <leader>. :AgIn 

  nnoremap <silent> F :call SearchWordWithAg()<CR>
  vnoremap <silent> F :call SearchVisualSelectionWithAg()<CR>
  nnoremap <silent> <leader>gl :Commits<CR>
  nnoremap <silent> <leader>ga :BCommits<CR>
  nnoremap <silent> <leader>ft :Filetypes<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
  endfunction

  function! SearchWithAgInDirectory(...)
    call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
  endfunction
  command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)


let g:fzf_files_options =
  \ '--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

if has("autocmd")
  augroup filetype_elixir
    au!
    autocmd FileType elixir autocmd BufEnter * :syntax sync fromstart
  augroup END
endif

" Auto ;
autocmd FileType javascript,css,typescript nmap <silent> <Leader>; <Plug>(cosco-commaOrSemiColon)
autocmd FileType javascript,css,typescript imap <silent> <Leader>; <c-o><Plug>(cosco-commaOrSemiColon)
