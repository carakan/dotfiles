set nobackup
set cursorcolumn
colorscheme new-railscasts

let g:indent_guides_auto_colors = 0
" Set split separator to Unicode box drawing character
set encoding=utf8
set fillchars=vert:│

" Uses tpope's vim-sensible defaults
set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline
set nospell

" Enable popup transparency (neovim >= 0.4)
set pumblend=20

" Enable ruby syntax
let g:ruby_operators = 1

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Little tricks
nnoremap <bs> <c-^>
set undofile " Only works on neovim

autocmd BufRead,BufNewFile *.html.erb set filetype=html.eruby
autocmd BufRead,BufNewFile *.html.eex set filetype=eelixir.html

" airline customizations
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline#extensions#tabline#enabled = 1
let g:bufferline_echo = 0

" ALE
let g:ale_completion_enabled = 1
let g:ale_completion_max_suggestions = 10
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol   = ' '
let g:airline#extensions#ale#info_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 0
let g:ale_sign_error=''
let g:ale_sign_info=''
let g:ale_sign_style_error=''
let g:ale_sign_style_warning=''
let g:ale_sign_warning=''
let g:ale_statusline_format = [' %d', ' %d', ' %d']
nmap ]a <Plug>(ale_next_wrap)
nmap [a <Plug>(ale_previous_wrap)
nmap <leader>f <Plug>(ale_fix)
let g:ale_linters = {
  \   'css': ['stylelint', 'prettier'],
  \   'elixir': ['credo', 'mix'],
  \   'erb': ['erb', 'erubis'],
  \   'haml': ['haml-lint'],
  \   'handlebars': ['ember-template-lint'],
  \   'html': [],
  \   'javascript': ['eslint', 'tsserver'],
  \   'json': ['prettier'],
  \   'ruby': ['rubocop', 'ruby', 'rails_best_practices', 'reek'],
  \   'scss': ['stylelint', 'prettier'],
  \   'typescript': ['tslint', 'typecheck', 'tsserver'],
  \   'vim': ['vint'],
  \   'vue': ['vls', 'eslint'],
  \}

let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'css': ['stylelint', 'prettier'],
  \   'elixir': ['mix_format'],
  \   'javascript': ['prettier', 'eslint'],
  \   'json': ['prettier'],
  \   'markdown': ['prettier'],
  \   'ruby': ['rufo', 'rubocop'],
  \   'scss': ['stylelint'],
  \   'typescript': ['prettier', 'tslint'],
  \   'vue': ['prettier'],
  \   'yaml': ['prettier'],
  \   'html': ['prettier']
  \}

" Signify
let g:signify_cursorhold_insert      = 1
let g:signify_cursorhold_normal      = 1
let g:signify_disable_by_default     = 0
let g:signify_sign_add               = '✚'
let g:signify_sign_change            = ''
let g:signify_sign_changedelete      = ''
let g:signify_sign_delete            = '✖'
let g:signify_sign_delete_first_line = '﫨'
let g:signify_update_on_bufenter     = 1
let g:signify_update_on_focusgained  = 1

" Text Formatting/Layout                                                    "
set autoindent            " auto-indent
set expandtab             " use spaces instead of tabs
set shiftround            " always indent/outdent to the nearest tabstop
set smarttab              " use tabs at the start of a line, spaces elsewhere

" elixir config
let g:elixir_use_markdown_for_docs = 1

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set textwidth=120
set colorcolumn=+1
let &colorcolumn = '80,' . join(range(120, 999), ',')

" Vim-grepper
nnoremap <leader>ag  :Grepper -tool rg -open -switch<cr>
nnoremap <Leader>* :Grepper -tool rg -cword -noprompt<CR>
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>
vnoremap <c-s> <Esc>:w<CR>

" vim test plugin
let g:test#strategy = 'tslime'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

let g:test#javascript#mocha#executable = 'NODE_ENV=test mocha'
let g:test#elixir#exunit#options = {
  \ 'nearest': '--trace --color',
  \ 'file':    '--trace --color',
  \ 'suite':   '--color --trace --failed',
\}

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Ultisnips
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<c-z>'
let g:UltiSnipsJumpForwardTrigger = '<c-b>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'snips']

:set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" FZF integration
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

nnoremap <silent> <C-c> :Commands<CR>
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-t> :Buffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>? :History<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>O :BTags<CR>
nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>ft :Filetypes<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>m :Maps<CR>
nnoremap <silent> <leader>o :Tags<CR>
nnoremap <silent> F :call SearchWordWithRg()<CR>
vnoremap <silent> F :call SearchVisualSelectionWithRg()<CR>
nnoremap <silent> <leader>M :FZFMru<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

function! SearchWordWithRg()
  execute 'Rg' expand('<cword>')
endfunction

function! SearchVisualSelectionWithRg() range
  let l:old_reg = getreg('"')
  let l:old_regtype = getregtype('"')
  let l:old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let l:selection = getreg('"')
  call setreg('"', l:old_reg, l:old_regtype)
  let &clipboard = l:old_clipboard
  execute 'Rg' l:selection
endfunction

function! SearchWithRgInDirectory(...)
  call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
endfunction
command! -nargs=+ -complete=dir AgIn call SearchWithRgInDirectory(<f-args>)

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
nnoremap <silent> <leader>s :<C-u>call system('say ' . expand('<cword>'))<CR>

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.hbs,*.xml,*.vue'

nnoremap <silent> Q :CloseBuffers<CR>

let g:mustache_abbreviations = 1

" WebDevIcons
let g:DevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['erb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ex'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['exs'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['json'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jsx'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rabl'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['svg'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yaml'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yml'] = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_airline_tabline = 1

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.keep'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.rspec'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-gemset'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.ruby-version'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['Rakefile'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['application.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['environment.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.json'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['routes.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['spring.rb'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['node_modules'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['ember-cli'] = ''

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" vim-nerdtree-syntax-highlight:
let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['ex'] = '834F79'
let g:NERDTreeExtensionHighlightColor['exs'] = 'c57bd8'
let g:NERDTreeExtensionHighlightColor['yml'] = 'f4bf70'
let g:NERDTreeExtensionHighlightColor['yaml'] = 'f4bf70'
let g:NERDTreeChDirMode=0

" AndrewRadev/ember_tools.vim
let g:ember_tools_highlight_actions = 0

" Rubygems
nnoremap <leader><leader>g :RubygemsRecentVersion<cr>

let g:airline#extensions#cursormode#enabled = 0

" Configure node, python executable
let g:node_host_prog = '/Users/carakan/.asdf/installs/nodejs/10.15.0/.npm/lib/node_modules/neovim/bin/cli.js'
let g:python3_host_prog = '/usr/local/bin/python3'
let g:loaded_python_provider = 1
let g:bookmark_sign = ''
let g:NERDTreeMapMenu = 'nt'

vmap <leader>y :YankCode<CR>

function! ExpandLspSnippet()
    call UltiSnips#ExpandSnippetOrJump()
    if !pumvisible() || empty(v:completed_item)
        return ''
    endif

    " only expand Lsp if UltiSnips#ExpandSnippetOrJump not effect.
    let l:value = v:completed_item['word']
    let l:matched = len(l:value)
    if l:matched <= 0
        return ''
    endif

    " remove inserted chars before expand snippet
    if col('.') == col('$')
        let l:matched -= 1
        exec 'normal! ' . l:matched . 'Xx'
    else
        exec 'normal! ' . l:matched . 'X'
    endif

    if col('.') == col('$') - 1
        " move to $ if at the end of line.
        call cursor(line('.'), col('$'))
    endif

    " expand snippet now.
    call UltiSnips#Anon(l:value)
    return ''
endfunction

imap <C-k> <C-R>=ExpandLspSnippet()<CR>

nmap <C-y> :call <SID>SynStack()<CR>

function! <SID>SynStack()
    if !exists('*synstack')
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

let g:vimade_usecursorhold = 1
let g:vimade = {
  \ "fadelevel": 0.6
\}