" no backups
set nobackup
set nowritebackup

colorscheme new-railscasts

if has("gui_running")
else
  let g:indent_guides_auto_colors = 0
  " Popup color.
  :hi Pmenu ctermbg=232 ctermfg=253
  :hi PmenuSel ctermbg=239 ctermfg=255
  :hi PmenuSbar ctermbg=255
  " Set split separator to Unicode box drawing character
  set encoding=utf8
  set fillchars=vert:│
end

" No spell in any case
set nospell

" Uses tpope's vim-sensible defaults

set hidden
set notimeout
set noswapfile
set nowritebackup
set nowrap
set nofoldenable
set lazyredraw
set number
set expandtab
set ignorecase
set smartcase
set noshowmode
set modeline

" Enable ruby syntax
let ruby_operators = 1

" Disable arrows keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" airline customizations
let g:airline_theme='bubblegum'
let g:airline_detect_modified = 1
let g:airline_section_z = airline#section#create(['%{ObsessionStatus(''$'', '''')}', 'windowswap', '%3p%% ', 'linenr', ':%3v '])
let g:airline#extensions#tabline#enabled = 1

" neomake
" autocmd! BufWritePost * Neomake
" let g:neomake_ruby_enabled_makers = ['mri', 'rubocop', 'reek']
" let g:neomake_elixir_enabled_makers = ['credo', 'mix']
" let g:neomake_css_enabled_makers = ['stylelint']
" let g:neomake_scss_enabled_makers = ['sass-lint']
" let g:neomake_javascript_enabled_makers = ['eslint', 'jscs']
" let g:neomake_typescript_enabled_makers = ['tslint', 'tsc']
" 
" let g:neomake_error_sign = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
" let g:neomake_warning_sign = {'text': '⚠', 'texthl': 'WarningMsgNeo'}
" let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
" let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

" ALE
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
let g:ale_sign_column_always = 0
:hi ALEErrorSign guibg=#353535 guifg=#d80a0a gui=NONE
:hi ALEWarningSign guibg=#353535 guifg=#ffd400 gui=NONE
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <leader>f <Plug>(ale_fix)
let g:ale_javascript_prettier_options = '--stdin --single-quote --print-width 100 --trailing-comma es5'
 let g:ale_linters = {
 \   'javascript': ['eslint'],
 \   'ruby': ['rubocop', 'ruby', 'rails_best_practices'],
 \   'typescript': ['tslint', 'typecheck'],
 \   'html': [],
 \   'css': ['stylelint', 'prettier'],
 \   'haml': ['haml-lint'],
 \   'handlebars': ['ember-template-lint'],
 \   'json': ['prettier'],
 \   'scss': ['stylelint', 'prettier']
 \}

let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['tslint'],
\   'ruby': ['rubocop']
\}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Formatting/Layout                                                 	 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent            " auto-indent
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set smartindent           " automatically insert one extra level of indentation
set smarttab              " use tabs at the start of a line, spaces elsewhere
set nowrap                " don't wrap text

" elixir config
let g:alchemist#extended_autocomplete = 1

" Easier split navigations https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Make it obvious where 80 characters is
set tw=120
set textwidth=120
set colorcolumn=+1
:hi ColorColumn guibg=#302424 ctermbg=237
let &colorcolumn="80,".join(range(120,999),",")

" silver search
"command! -nargs=* -complete=file GG Grepper -tool git -query <args>
command! -nargs=* -complete=file Agf Grepper -tool rg -open -switch -query <args>
"command! -nargs=* -complete=file Ack Grepper -tool ag -open -switch -query <args>
nnoremap <leader>ag  :Grepper -tool rg -open -switch<cr>

" save files
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>l
vnoremap <c-s> <Esc>:w<CR>

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
" let b:deoplete_sources = ['buffer', 'neosnippet']

" vim test plugin
let g:test#strategy = 'tslime'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>
let test#javascript#mocha#executable = 'NODE_ENV=test mocha'
" let test#elixir#exunit#options = '--trace'

let test#elixir#exunit#options = {
  \ 'nearest': '--trace',
  \ 'file':    '--trace',
  \ 'suite':   '--stale --trace',
\}

" tslime configs
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" dash integration
nmap <silent> <leader>d <Plug>DashSearch

" Auto tags generation
map <Leader>ct :call atags#generate()<cr>

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsEditSplit= "context"

:set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" move lines in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" NEW fzf integration
let g:fzf_layout = { 'down': '~30%' }
  nnoremap <silent> <C-t> :Files<CR>
  nnoremap <silent> <C-p> :Files<CR>
  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>
  nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
  nnoremap <silent> <leader>. :AgIn 
  nnoremap <silent> <C-c> :Commands<CR>

  nnoremap <silent> F :call SearchWordWithAg()<CR>
  vnoremap <silent> F :call SearchVisualSelectionWithAg()<CR>
  nnoremap <silent> <leader>gl :Commits<CR>
  nnoremap <silent> <leader>ga :BCommits<CR>
  nnoremap <silent> <leader>ft :Filetypes<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
  endfunction

  function! SearchWithAgInDirectory(...)
    call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
  endfunction
  command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)


let g:fzf_files_options =
  \ '--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

if has("autocmd")
  augroup filetype_elixir
    au!
    autocmd FileType elixir autocmd BufEnter * :syntax sync fromstart
  augroup END
endif

" Auto ;
autocmd FileType javascript,css,typescript nmap <silent> <Leader>; <Plug>(cosco-commaOrSemiColon)
autocmd FileType javascript,css,typescript imap <silent> <Leader>; <c-o><Plug>(cosco-commaOrSemiColon)

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

let g:tsuquyomi_completion_detail = 1

nnoremap <silent> <leader>s :<C-u>call system('say ' . expand('<cword>'))<CR>

let g:closetag_filenames = "*.html,*.xhtml,*.phtml, *.hbs, *.xml"

" let g:neoformat_try_formatprg = 1
" augroup NeoformatAutoFormat
"     autocmd!
"     autocmd FileType javascript set formatprg=prettier\ --stdin\ --single-quote\ --print-width\ 100\ --trailing-comma\ es5
"     autocmd BufWritePre *.js Neoformat
" augroup END

nnoremap <silent> Q :CloseBuffers<CR>

set hidden

let g:LanguageClient_serverCommands = {
    \ 'html.handlebars': ['node', '~/lsp/ember-language-server/lib/start-server.js'],
    \ 'handlebars': ['node', '~/lsp/ember-language-server/lib/start-server.js']
    \ }
let g:mustache_abbreviations = 1
" Automatically start language servers.
let g:LanguageClient_autoStart = 1